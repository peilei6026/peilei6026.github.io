<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>裴雷de博客</title>
  
  <subtitle>只争朝夕 不负韶华</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peilei6026.github.io/"/>
  <updated>2020-08-21T03:10:22.074Z</updated>
  <id>https://peilei6026.github.io/</id>
  
  <author>
    <name>裴雷</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS创意与视觉表现</title>
    <link href="https://peilei6026.github.io/2020/08/21/CSS%E5%88%9B%E6%84%8F%E4%B8%8E%E8%A7%86%E8%A7%89%E8%A1%A8%E7%8E%B0%20copy/"/>
    <id>https://peilei6026.github.io/2020/08/21/CSS%E5%88%9B%E6%84%8F%E4%B8%8E%E8%A7%86%E8%A7%89%E8%A1%A8%E7%8E%B0%20copy/</id>
    <published>2020-08-21T02:47:26.000Z</published>
    <updated>2020-08-21T03:10:22.074Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>    <title></title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="裴雷de博客" type="application/atom+xml"></head><body><style type="text/css">.column {    overflow: hidden;}.column-left {    height: 400px;    background-color: #fff;    position: relative;    float: left;}.column-right {    height: 400px;    padding: 16px;    background-color: #eee;    box-sizing: border-box;    overflow: hidden;}.resize-save {    position: absolute;    top: 0; right: 5px; bottom: 0; left: 0;    padding: 16px;    overflow-x: hidden;}.resize-bar {    width: 200px; height: inherit;    resize: horizontal;    cursor: ew-resize;    cursor: col-resize;    opacity: 0;    overflow: scroll;}/* 拖拽线 */.resize-line {    position: absolute;    right: 0; top: 0; bottom: 0;    border-right: 2px solid #eee;    border-left: 1px solid #bbb;    pointer-events: none;}.resize-bar:hover ~ .resize-line,.resize-bar:active ~ .resize-line {    border-left: 1px dashed skyblue;}.resize-bar::-webkit-scrollbar {    width: 200px; height: inherit;}<p>/* Firefox只有下面一小块区域可以拉伸 */<br>@supports (-moz-user-select: none) {<br>    .resize-bar:hover ~ .resize-line,<br>    .resize-bar:active ~ .resize-line {<br>        border-left: 1px solid #bbb;<br>    }<br>    .resize-bar:hover ~ .resize-line::after,<br>    .resize-bar:active ~ .resize-line::after {<br>        content: ‘’;<br>        position: absolute;<br>        width: 16px; height: 16px;<br>        bottom: 0; right: -8px;<br>        background: url(./resize.svg);<br>        background-size: 100% 100%;<br>    }<br>}<br></style></p><div class="column">    <div class="column-left">        <div class="resize-bar"></div>        <div class="resize-line"></div>        <div class="resize-save">            左侧的内容，左侧的内容，左侧的内容，左侧的内容        </div>                                                </div>    <div class="column-right">        右侧的内容，右侧的内容，右侧的内容，右侧的内容    </div></div></body></html><!DOCTYPE html><html><head>    <title></title></head><body><style type="text/css">.flow-colorful {    max-width: 600px;    height: 150px;    background: linear-gradient(to right, red, orange, yellow, green, cyan, blue, purple);    animation: hue 6s linear infinite;}@keyframes hue {    from {        filter: hue-rotate(0deg);    }    to {        filter: hue-rotate(360deg);    }}</style><div class="flow-colorful"></div></body></html><!DOCTYPE html><html><head>    <title></title></head><body><style type="text/css">.flow-slogon {    font-size: 120px;    -webkit-background-clip: text;    -webkit-text-fill-color: transparent;    background-image: linear-gradient(to right, red, yellow, lime, aqua, blue, fuchsia);    animation: hue 6s linear infinite;}</style><h2 class="flow-slogon">第五届CSS大会</h2></body></html><!DOCTYPE html><html><head>    <title></title></head><body><style type="text/css">.flow-twill {    padding-right: 30%;    height: calc(1.4142 * 20px);    background: repeating-linear-gradient(45deg, teal, teal 10px, transparent 11px, transparent 19px, teal 20px);    background-clip: content-box;    animation: twill 1s linear infinite;    position: relative;}.flow-twill::before {    content: '';    position: absolute;    width: 100%; height: 100%;    background: linear-gradient(rgba(0,0,0,.5), hsla(0,0%,100%,.5), rgba(0,0,0,.5));}@keyframes twill {    from {        background-position: 0 0;    }    to {        background-position: 0 calc(-1 * 1.4142 * 40px);    }}.flow-wave {    padding: 5px 0;}.flow-wave:hover,.flow-wave:focus {    background: radial-gradient(circle at 10px -7px, transparent 8px, currentColor 8px, currentColor 9px, transparent 9px) repeat-x,        radial-gradient(circle at 10px 27px, transparent 8px, currentColor 8px, currentColor 9px, transparent 9px) repeat-x;    background-size: 20px 20px;    background-position: -10px calc(100% + 16px), 0 calc(100% - 4px);    animation: waveFlow 1s infinite linear;}@keyframes waveFlow {    from { background-position-x: -10px, 0; }    to { background-position-x: -30px, -20px; }}</style><div class="flow-twill"></div><a href="javascript:" class="flow-wave">hover我（移动端按下）</a></body></html><!DOCTYPE html><html><head>    <title></title></head><body><style type="text/css">.CSS代码：dot-a {    display: inline-block;    height: 1em; line-height: 1;    text-align: left;    vertical-align: -.25ex;    overflow: hidden;}dot-a::before {    display: block;    content: '...\A..\A.';    white-space: pre-wrap;    animation: dot1 3s infinite step-start both;}@keyframes dot1 {    33% { transform: translateY(-2em); }    66% { transform: translateY(-1em); }}</style>正在加载中<dot-a>...</dot-a></body></html>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;meta name=&quot;generator&quot; content=&quot;Hexo 4.2.0&quot;&gt;&lt;link rel=&quot;alternate&quot; href=&quot;/atom.xml&quot; title=
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://peilei6026.github.io/tags/CSS/"/>
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS创意与视觉表现</title>
    <link href="https://peilei6026.github.io/2020/08/21/CSS%E5%88%9B%E6%84%8F%E4%B8%8E%E8%A7%86%E8%A7%89%E8%A1%A8%E7%8E%B0(1)/"/>
    <id>https://peilei6026.github.io/2020/08/21/CSS%E5%88%9B%E6%84%8F%E4%B8%8E%E8%A7%86%E8%A7%89%E8%A1%A8%E7%8E%B0(1)/</id>
    <published>2020-08-21T02:47:26.000Z</published>
    <updated>2020-08-21T03:02:04.876Z</updated>
    
    <content type="html"><![CDATA[<body><style type="text/css">    .cover {    padding: 36% 50%;    background: linear-gradient(to right, white 50%, black calc(50% + 1px));    position: relative;    font-size: 200%;}.cover::before,.cover::after {    content: '';    position: absolute;    width: 36%; height: 50%;    border-radius: 50%;    left: 50%;    transform: translateX(-50%);}.cover::before {    top: 0;    background: radial-gradient(circle, white 13%, black calc(13% + 1px));}.cover::after {    bottom: 0;    background: radial-gradient(circle, black 13%, white calc(13% + 1px));}.cover-h,.cover-p {    position: absolute;    mix-blend-mode: difference;    left: 0; right: 0;    text-align: center;    color: #fff;    z-index: 1;}</style><div class="cover">    <h2 class="cover-h">CSS创意与视觉表现</h2></div></body><!DOCTYPE html><html><head>    <title></title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="裴雷de博客" type="application/atom+xml"></head><body><style type="text/css">    .square {    display: inline-block;    padding: 300px;    background-color: #fff;    background-image: linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%), linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%);    background-size: 16px 16px;    background-position: 0 0, 8px 8px;}</style><div class="square"></div></body></html><!DOCTYPE html><html><head>    <title></title></head><body><style type="text/css">.pie-simple {    width: 128px; height: 128px;    background-color: white;    border-radius: 50%;    overflow: hidden;}.pie-left,.pie-right {    width: 50%; height: 100%;    float: left;    position: relative;    overflow: hidden;}.pie-left::before,.pie-right::before,.pie-right::after {    content: '';    position: absolute;    width: 100%; height: 100%;    background-color: teal;}.pie-left::before {    left: 100%;    transform-origin: left;    transform: rotate(calc(3.6deg * (var(--percent) - 50)));    opacity: calc(99999 * (var(--percent) - 50));}.pie-right::before {    right: 100%;    transform-origin: right;    transform: rotate(calc(3.6deg * var(--percent)));}.pie-right::after {    opacity: calc(99999 * (var(--percent) - 50));}.pie-spin {    width: 128px; height: 128px;    background-color: white;    border-radius: 50%;    overflow: hidden;}.pie-spin-left,.pie-spin-right {    width: 50%; height: 100%;    float: left;    position: relative;    overflow: hidden;}.pie-spin-left::before,.pie-spin-right::before,.pie-spin-left::after,.pie-spin-right::after {    content: '';    position: absolute;    width: 100%; height: 100%;    background-color: teal;}.pie-spin-left {    opacity: 1;    animation: second-half-show 1.6s steps(1, end) infinite;}.pie-spin-left::before {    left: 100%;    transform-origin: left;    animation: spin 1.6s .8s infinite linear;}.pie-spin-right::before {    right: 100%;    transform-origin: right;    animation: spin 1.6s infinite linear;}.pie-spin-right::after {    animation: second-half-show 1.6s steps(1, end) infinite;    opacity: 1;}.pie-spin-left::after {    animation: second-half-hide 1.6s steps(1, end) infinite;    opacity: 0;}@keyframes spin {  0%   { transform: rotate(0); }  100% { transform: rotate(360deg); }}@keyframes second-half-hide {  0%        { opacity: 1; }  50%, 100% { opacity: 0; }}@keyframes second-half-show {  0%        { opacity: 0; }  50%, 100% { opacity: 1; }}.pie-spin2 {    width: 128px; height: 128px;    background-color: white;    border-radius: 50%;    overflow: hidden;}.pie-spin2-left,.pie-spin2-right {    width: 50%; height: 100%;    float: left;    position: relative;    overflow: hidden;}.pie-spin2-left::before,.pie-spin2-right::before {    content: '';    position: absolute;    width: 100%; height: 100%;    background-color: teal;}.pie-spin2-left::before {    left: 100%;    transform-origin: left;    animation: spinWait2 3.2s infinite linear;}.pie-spin2-right::before {    right: 100%;    transform-origin: right;    animation: spinWait1 3.2s infinite linear;}@keyframes spinWait1 {    0%        { transform: rotate(0deg); }    25%, 50%  { transform: rotate(180deg); }    75%, 100% { transform: rotate(360deg); }}@keyframes spinWait2 {    0%, 25%  { transform: rotate(0deg); }    50%, 75% { transform: rotate(180deg); }    100%     { transform: rotate(360deg); }}</style><div class="pie-item">    <p>10%大小</p>    <div class="pie-simple" style="--percent: 10;">        <div class="pie-left"></div>        <div class="pie-right"></div>    </div></div><div class="pie-item">    <p>40%大小</p>    <div class="pie-simple" style="--percent: 40;">        <div class="pie-left"></div>        <div class="pie-right"></div>    </div></div><div class="pie-item">    <p>80%大小</p>    <div class="pie-simple" style="--percent: 80;">        <div class="pie-left"></div>        <div class="pie-right"></div>    </div></div><div class="pie-item">    <p>99%大小</p>    <div class="pie-simple" style="--percent: 99;">        <div class="pie-left"></div>        <div class="pie-right"></div>    </div></div><div class="pie-spin2">    <div class="pie-spin2-left"></div>    <div class="pie-spin2-right"></div></div><div class="pie-spin">    <div class="pie-spin-left"></div>    <div class="pie-spin-right"></div></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;body&gt;
&lt;style type=&quot;text/css&quot;&gt;
    .cover {
    padding: 36% 50%;
    background: linear-gradient(to right, white 50%, black calc(50% + 1px
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://peilei6026.github.io/tags/CSS/"/>
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>js解析路由为对象</title>
    <link href="https://peilei6026.github.io/2020/08/20/js%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1%E4%B8%BA%E5%AF%B9%E8%B1%A1/"/>
    <id>https://peilei6026.github.io/2020/08/20/js%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1%E4%B8%BA%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-20T08:44:20.000Z</published>
    <updated>2020-08-20T08:47:39.690Z</updated>
    
    <content type="html"><![CDATA[<ul><li>数据显示在开发工具中<br>写一个parseQueryString函数，将类似url= “<a href="http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2&quot;" target="_blank" rel="noopener">http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2&quot;</a> 解析成对象，结果结果如{key0: “0”, key1: “1”, key2: “2”}<!DOCTYPE html><html><head>  <title>解析路由</title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="裴雷de博客" type="application/atom+xml"></head><body><input type="text" id="value" placeholder="要获取的输入的值"><input type="button" value="解析" onclick="parseQueryString()"/><br /><a id="res" ></a><!-- 写一个parseQueryString函数，将类似url= "http://witmax.cn/index.php?key0=0&key1=1&key2=2" 解析成对象，结果结果如{key0: "0", key1: "1", key2: "2"} --><script type="text/javascript">  function parseQueryString(){      //获取id=value的标签的值，并把值赋给res       var data=document.getElementById('value').value;       var str = data.split('?');       var res = str[1].split('&');       var result = {};          for(var i=0 ; i < res.length ; i++){              var process = res[i].split('=');               result[process[0]] = process[1];          }          console.log(result);  }  // document.getElementById('res').innerHTML=result;</script></body></html></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;数据显示在开发工具中&lt;br&gt;写一个parseQueryString函数，将类似url= “&lt;a href=&quot;http://witmax.cn/index.php?key0=0&amp;amp;key1=1&amp;amp;key2=2&amp;quot;&quot; target=&quot;_blank
      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js获取ul中li的索引序号</title>
    <link href="https://peilei6026.github.io/2020/08/20/js%E8%8E%B7%E5%8F%96ul%E4%B8%ADli%E7%9A%84%E7%B4%A2%E5%BC%95%E5%BA%8F%E5%8F%B7/"/>
    <id>https://peilei6026.github.io/2020/08/20/js%E8%8E%B7%E5%8F%96ul%E4%B8%ADli%E7%9A%84%E7%B4%A2%E5%BC%95%E5%BA%8F%E5%8F%B7/</id>
    <published>2020-08-20T08:42:58.000Z</published>
    <updated>2020-08-20T08:47:27.965Z</updated>
    
    <content type="html"><![CDATA[<ul><li>数据显示在开发工具中<br>有如下dom结构<ul id="testul"><li>111</li><li>222</li><li>333</li><li>444</li><li>555</li><li>666</li></ul>jquery有index()方法可以获取li元素在ul下的索引序号如 var $lis =$("#testul li");$lis.click(function(){alert($(this).index())})现要求用原生js写出同等于index()的效果<!DOCTYPE html><html><head>  <title>获取节点</title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="裴雷de博客" type="application/atom+xml"></head><body>  <div>      <ul id="testul">          <li>11111</li>          <li>22222</li>          <li>33333</li>          <li>44444</li>          <li>55555</li>          <li>66666</li>      </ul>  </div><!-- 有如下dom结构<ul id="testul"><li>111</li><li>222</li><li>333</li><li>444</li><li>555</li><li>666</li></ul>jquery有index()方法可以获取li元素在ul下的索引序号如 var $lis =$("#testul li");$lis.click(function(){alert($(this).index())})现要求用原生js写出同等于index()的效果 --><script type="text/javascript">var ul = document.getElementById('testul')// 获取ul的id=testul// console.log(ul);var li = ul.getElementsByTagName('li')// 获取li// console.log(li);for (var i = 0, len = li.length; i < len; ++i) {// 因为这个li是一个dom对象，所以我们可以在它上面添加属性li[i].index = i li[i].onclick = function () {    // 这里的this指向li[i]，因此我们可以从上面取到之前的index属性值  var index = this.index   console.log(index)}</li></ul><p>}<br> </script></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;数据显示在开发工具中&lt;br&gt;有如下dom结构&lt;ul id=&quot;testul&quot;&gt;
&lt;li&gt;111&lt;/li&gt;
&lt;li&gt;222&lt;/li&gt;
&lt;li&gt;333&lt;/li&gt;
&lt;li&gt;444&lt;/li&gt;
&lt;li&gt;555&lt;/li&gt;
&lt;li&gt;666&lt;/li&gt;
&lt;/ul&gt;
jquery有i
      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>出现次数前10的字母</title>
    <link href="https://peilei6026.github.io/2020/08/20/js%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E5%89%8D10%E7%9A%84%E5%AD%97%E6%AF%8D/"/>
    <id>https://peilei6026.github.io/2020/08/20/js%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E5%89%8D10%E7%9A%84%E5%AD%97%E6%AF%8D/</id>
    <published>2020-08-20T08:41:36.000Z</published>
    <updated>2020-08-20T08:42:27.141Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="zh"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <meta http-equiv="X-UA-Compatible" content="ie=edge">  <title>FileReader</title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="裴雷de博客" type="application/atom+xml"></head><body>  <input id="input" type="file">  <script>    const input = document.querySelector('input[type=file]')    input.addEventListener('change', ()=>{      const reader = new FileReader()      reader.readAsText(input.files[0],'utf8') // input.files[0]为第一个文件      reader.onload = ()=>{        // document.body.innerHTML += reader.result  // reader.result为获取结果        const resule = reader.result;        //遍历结果        // console.log(resule);        // document.body.innerHTML += "1231";            // var str = resule;            // var rel = /(\d{1,3})+(?:\.\d+)?/g;            //取出所有字母            var str = resule.replace(/[^a-zA-Z]/g,'');            // console.log(str);           var json = {};        //遍历str拆解其中的每一个字符将其某个字符的值及出现的个数拿出来作为json的kv                 for (var i = 0; i < str.length; i++) {                //判断json中是否有当前str的值                  if (!json[str.charAt(i)]) {                    //如果不存在 就将当前值添加到json中去                         json[str.charAt(i)] = 1;                  } else {                     //else的话就让数组中已有的当前值的index值++；                             json[str.charAt(i)]++;                 }            }            // console.log(json);            var arr = [];                for (let i in json) {                         let o = {};                        //  console.log(o)                        o[i] = json[i];                arr.push(o)                }        //    var res= arr.sort(function(a,b){return });        //    var res=  arr.map((key)=>{        //         [        //             key,arr[key]        //         ]        //     })           var res= arr.sort(function(a,b){               return Object.values(b)[0]-Object.values(a)[0]           });        //    console.log(res[0]);        // console.log(res);        var resu= [];        for(var i=0;i<10;i++){             for(var k in res[i]){                document.write("出现的字母"+ k+ " " + "次数"+res[i][k]+"<br>" )                //  console.log(k);                //  console.log(res[i][k]);             }            // console.log(resu);<pre><code>    }    // console.log(resu);  }}, false)// 获取上传txt文件的结果&lt;/script&gt;</code></pre></body></html>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;zh&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
 
      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js数据结构及算法</title>
    <link href="https://peilei6026.github.io/2020/08/20/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95/"/>
    <id>https://peilei6026.github.io/2020/08/20/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-20T07:50:41.000Z</published>
    <updated>2020-08-20T08:13:58.544Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>一些问题</title>
    <link href="https://peilei6026.github.io/2020/08/19/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://peilei6026.github.io/2020/08/19/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-19T12:58:48.000Z</published>
    <updated>2020-08-20T08:40:51.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些正则"><a href="#一些正则" class="headerlink" title="一些正则"></a>一些正则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*是否带有小数*&#x2F;</span><br><span class="line">function    isDecimal(strValue )  &#123;  </span><br><span class="line">   var  objRegExp&#x3D; &#x2F;^\d+\.\d+$&#x2F;;</span><br><span class="line">   return  objRegExp.test(strValue);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#x2F;*校验是否中文名称组成 *&#x2F;</span><br><span class="line">function ischina(str) &#123;</span><br><span class="line">    var reg&#x3D;&#x2F;^[\u4E00-\u9FA5]&#123;2,4&#125;$&#x2F;;   &#x2F;*定义验证表达式*&#x2F;</span><br><span class="line">    return reg.test(str);     &#x2F;*进行验证*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*校验是否全由8位数字组成 *&#x2F;</span><br><span class="line">function isStudentNo(str) &#123;</span><br><span class="line">    var reg&#x3D;&#x2F;^[0-9]&#123;8&#125;$&#x2F;;   &#x2F;*定义验证表达式*&#x2F;</span><br><span class="line">    return reg.test(str);     &#x2F;*进行验证*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*校验电话码格式 *&#x2F;</span><br><span class="line">function isTelCode(str) &#123;</span><br><span class="line">    var reg&#x3D; &#x2F;^((0\d&#123;2,3&#125;-\d&#123;7,8&#125;)|(1[3584]\d&#123;9&#125;))$&#x2F;;</span><br><span class="line">    return reg.test(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*校验邮件地址是否合法 *&#x2F;</span><br><span class="line">function IsEmail(str) &#123;</span><br><span class="line">    var reg&#x3D;&#x2F;^\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\.[a-z]&#123;2,4&#125;)&#123;1,3&#125;$&#x2F;;</span><br><span class="line">    return reg.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于fetch的一些实例"><a href="#关于fetch的一些实例" class="headerlink" title="关于fetch的一些实例"></a>关于fetch的一些实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取数据</span><br><span class="line">  getData() &#123;</span><br><span class="line">    fetch(&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;Navigation&#39;, &#123;</span><br><span class="line">      method: &#39;GET&#39;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;).then((response) &#x3D;&gt; &#123;</span><br><span class="line">      if (response.ok) &#123;</span><br><span class="line">        return response.json();</span><br><span class="line">        &#x2F;&#x2F; throw new Error(&#39;Fail to get response with status &#39; + response.status);</span><br><span class="line">      &#125;</span><br><span class="line">      return response.json();</span><br><span class="line">    &#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">      this.setState(&#123; data &#125;);</span><br><span class="line">    &#x2F;&#x2F; axios.get(&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;Navigation&#39;, &#123;</span><br><span class="line">    &#x2F;&#x2F; &#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;   this.setState(&#123; data &#125;);</span><br><span class="line">    &#x2F;&#x2F; &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F; 删除数据</span><br><span class="line">  onDelete &#x3D; (key) &#x3D;&gt; &#123;</span><br><span class="line">    fetch(&#96;http:&#x2F;&#x2F;localhost:3000&#x2F;Navigation&#x2F;$&#123;key&#125;&#96;, &#123;</span><br><span class="line">      method: &#39;DELETE&#39;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;).then(this.getData());</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F; 添加数据</span><br><span class="line">  addData &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    const info &#x3D; &#123;</span><br><span class="line">      id: &#96;$&#123;this.id.value&#125;&#96;,</span><br><span class="line">      navigationName: &#96;$&#123;this.name.value&#125;&#96;,</span><br><span class="line">      navigationId: &#39;&#39;,</span><br><span class="line">      navigationPath: &#96;$&#123;this.name.navigationPath&#125;&#96;,</span><br><span class="line">      display: 1,</span><br><span class="line">      weights: 2,</span><br><span class="line">      startUsing: 2,</span><br><span class="line">      creationTime: &#96;$&#123;moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;)&#125;&#96;,</span><br><span class="line">      changeTheTime: &#39;&#39;,</span><br><span class="line">      deleteTime: &#39;&#39;,</span><br><span class="line">      delete: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">    axios.post(&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;Navigation&#39;, info).then((data) &#x3D;&gt; &#123;</span><br><span class="line">      this.setState(&#123; data &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="解决html直接运行js的问题"><a href="#解决html直接运行js的问题" class="headerlink" title="解决html直接运行js的问题"></a>解决html直接运行js的问题</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一些正则&quot;&gt;&lt;a href=&quot;#一些正则&quot; class=&quot;headerlink&quot; title=&quot;一些正则&quot;&gt;&lt;/a&gt;一些正则&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://peilei6026.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式与开发实践</title>
    <link href="https://peilei6026.github.io/2020/08/14/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    <id>https://peilei6026.github.io/2020/08/14/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-08-14T09:14:36.000Z</published>
    <updated>2020-08-20T08:49:38.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分基础"><a href="#第一部分基础" class="headerlink" title="第一部分基础"></a>第一部分基础</h1><h1 id="1-面向对象得js"><a href="#1-面向对象得js" class="headerlink" title="1. 面向对象得js"></a>1. 面向对象得js</h1><h1 id="1-1-动态类型语言和鸭子类型"><a href="#1-1-动态类型语言和鸭子类型" class="headerlink" title="1.1 动态类型语言和鸭子类型"></a>1.1 动态类型语言和鸭子类型</h1><p>编程语言分为<br><em>静态类型语言*，<br>在编译时便已经确定变量得类型的<br>优点：<br>编译时能发现不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。<br>其次如果在程序中明确地规定了数据类型，编辑器还可以针对这些信息对程序进行一些优化工作，提高程序执行速度。<br>缺点：<br>*动态类型语言</em><br>和在程序运行得时候，待变量被赋值后，才会具有某种类型得 </p><h1 id="第二部分核心"><a href="#第二部分核心" class="headerlink" title="第二部分核心"></a>第二部分核心</h1><h1 id="第三部分技巧"><a href="#第三部分技巧" class="headerlink" title="第三部分技巧"></a>第三部分技巧</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分基础&quot;&gt;&lt;a href=&quot;#第一部分基础&quot; class=&quot;headerlink&quot; title=&quot;第一部分基础&quot;&gt;&lt;/a&gt;第一部分基础&lt;/h1&gt;&lt;h1 id=&quot;1-面向对象得js&quot;&gt;&lt;a href=&quot;#1-面向对象得js&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>产品研发的22条军规</title>
    <link href="https://peilei6026.github.io/2020/08/11/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E7%9A%8422%E6%9D%A1%E5%86%9B%E8%A7%84/"/>
    <id>https://peilei6026.github.io/2020/08/11/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E7%9A%8422%E6%9D%A1%E5%86%9B%E8%A7%84/</id>
    <published>2020-08-11T00:54:37.000Z</published>
    <updated>2020-08-11T02:41:48.599Z</updated>
    
    <content type="html"><![CDATA[<p>时间安排：<br>上午三个小时<br>一小时到一个半小时<br>到12.00之间，完成一个作业。<br>作业内容：<br>写一个文章**<br>不限题目 学完之后，通过学习经历，如果改进工作方法条例流程<br>用思辨的方法<br>时间安排：下午<br>研发管理系统使用<br>时间安排：晚上<br>作业用word/ppt来写。<br>个人上来讲<br>演讲表达能力</p><p>衡水中学的故事，教育体制的关系，军事化管理，缺少自我驱动能力学习，<br>问一个问题：分班，不是这样的，不论分到那里，只是工作的刚刚开始，具备广度和深度的人才，（心理学），–聆听<br>(《管理沟通》)<br>终身学习，贯穿到你的职业生涯始终。<br>接纳其他人的优点，规避缺点<br>迎合改变，</p><p>是所有研发人员都遵循的基本原则<br>是进行技术决策的方法论<br>是万得特色得研发最佳实践。</p><h1 id="1-重视研发标准化建设与执行"><a href="#1-重视研发标准化建设与执行" class="headerlink" title="1.重视研发标准化建设与执行"></a>1.重视研发标准化建设与执行</h1><p>部门事业群众多，信息交换麻烦，规范不标准，<br>工作没办法固化，病毒威胁</p><h1 id="2-用已知的最优方法实现"><a href="#2-用已知的最优方法实现" class="headerlink" title="2.用已知的最优方法实现"></a>2.用已知的最优方法实现</h1><p>认知有限，方法是不是最好的，<br>选用最好，最优得方法，</p><h1 id="3-让程序使用尽可能少的资源"><a href="#3-让程序使用尽可能少的资源" class="headerlink" title="3.让程序使用尽可能少的资源"></a>3.让程序使用尽可能少的资源</h1><p>使用最少得资源，带宽cpu内存<br>32位每个进程可以访问得空间是4gb，最多控制在100mb</p><h1 id="4-用好多线程编程"><a href="#4-用好多线程编程" class="headerlink" title="4.用好多线程编程"></a>4.用好多线程编程</h1><p>变成异步编程。<br>网站图片依次加载</p><h1 id="5-编写移植性好的代码"><a href="#5-编写移植性好的代码" class="headerlink" title="5.编写移植性好的代码"></a>5.编写移植性好的代码</h1><p>编写移植性好的代码。<br>苹果/安卓， 移植性好和兼容新好，代码写的通用，熟悉各种类型得浏览器，寻找不同得，例用别人写好得类库。</p><h1 id="6-减少代码耦合，提高复用性"><a href="#6-减少代码耦合，提高复用性" class="headerlink" title="6.减少代码耦合，提高复用性"></a>6.减少代码耦合，提高复用性</h1><p>减少代码耦合，提高复用性，组件化，关于设计方法得资料<br>代码重构和代码之美，结构合理，模块中间思路清晰，</p><h1 id="7-编码之前先弄清楚需求"><a href="#7-编码之前先弄清楚需求" class="headerlink" title="7.编码之前先弄清楚需求"></a>7.编码之前先弄清楚需求</h1><p>需要先明白需求，</p><h1 id="8-优先使用成熟和标准的技术"><a href="#8-优先使用成熟和标准的技术" class="headerlink" title="8.优先使用成熟和标准的技术"></a>8.优先使用成熟和标准的技术</h1><h1 id="9-技术框架必须支持国际化"><a href="#9-技术框架必须支持国际化" class="headerlink" title="9.技术框架必须支持国际化"></a>9.技术框架必须支持国际化</h1><p>陆总</p><h1 id="10-考虑项目实施成本"><a href="#10-考虑项目实施成本" class="headerlink" title="10.考虑项目实施成本"></a>10.考虑项目实施成本</h1><p>纯碎技术 </p><h1 id="11-编写高质量的技术文档"><a href="#11-编写高质量的技术文档" class="headerlink" title="11.编写高质量的技术文档"></a>11.编写高质量的技术文档</h1><h1 id="12-迭代改进，持续集成"><a href="#12-迭代改进，持续集成" class="headerlink" title="12.迭代改进，持续集成"></a>12.迭代改进，持续集成</h1><p>方法论问题。。。复杂问题简单化，一段一段景行插接 推送出去，</p><h1 id="13-编码的目标是为了方便用户而不是方便自己"><a href="#13-编码的目标是为了方便用户而不是方便自己" class="headerlink" title="13.编码的目标是为了方便用户而不是方便自己"></a>13.编码的目标是为了方便用户而不是方便自己</h1><p>五十行一个bug 学会写测试单元 ，不许是闭环</p><h1 id="14-关键逻辑必须注释"><a href="#14-关键逻辑必须注释" class="headerlink" title="14.关键逻辑必须注释"></a>14.关键逻辑必须注释</h1><p>不是越多越好，写在关键部分，其余的得把函数名写清楚就行。</p><h1 id="15-自己写的代码自己先测试"><a href="#15-自己写的代码自己先测试" class="headerlink" title="15.自己写的代码自己先测试"></a>15.自己写的代码自己先测试</h1><h1 id="16-提高代码质量的最简单方法是多写几遍"><a href="#16-提高代码质量的最简单方法是多写几遍" class="headerlink" title="16.提高代码质量的最简单方法是多写几遍"></a>16.提高代码质量的最简单方法是多写几遍</h1><h1 id="17-让架构与代码充满美感"><a href="#17-让架构与代码充满美感" class="headerlink" title="17.让架构与代码充满美感"></a>17.让架构与代码充满美感</h1><h1 id="18-让程序运行快一点、再快一点，直到极限"><a href="#18-让程序运行快一点、再快一点，直到极限" class="headerlink" title="18.让程序运行快一点、再快一点，直到极限"></a>18.让程序运行快一点、再快一点，直到极限</h1><p>用户感觉慢的时间极限时间为两秒，最好到1秒之内。</p><h1 id="19-每个Bug都是可以解决的，关键是决心"><a href="#19-每个Bug都是可以解决的，关键是决心" class="headerlink" title="19.每个Bug都是可以解决的，关键是决心"></a>19.每个Bug都是可以解决的，关键是决心</h1><h1 id="20-找不到问题的根源绝不放弃"><a href="#20-找不到问题的根源绝不放弃" class="headerlink" title="20.找不到问题的根源绝不放弃"></a>20.找不到问题的根源绝不放弃</h1><h1 id="21-技术攻坚最难的时候正是成长的时候"><a href="#21-技术攻坚最难的时候正是成长的时候" class="headerlink" title="21.技术攻坚最难的时候正是成长的时候"></a>21.技术攻坚最难的时候正是成长的时候</h1><h1 id="22-坚持学习，永葆青春"><a href="#22-坚持学习，永葆青春" class="headerlink" title="22.坚持学习，永葆青春"></a>22.坚持学习，永葆青春</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间安排：&lt;br&gt;上午三个小时&lt;br&gt;一小时到一个半小时&lt;br&gt;到12.00之间，完成一个作业。&lt;br&gt;作业内容：&lt;br&gt;写一个文章**&lt;br&gt;不限题目 学完之后，通过学习经历，如果改进工作方法条例流程&lt;br&gt;用思辨的方法&lt;br&gt;时间安排：下午&lt;br&gt;研发管理系统使用&lt;br
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://peilei6026.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于敏捷开发那些事</title>
    <link href="https://peilei6026.github.io/2020/08/10/%E5%85%B3%E4%BA%8E%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://peilei6026.github.io/2020/08/10/%E5%85%B3%E4%BA%8E%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2020-08-10T01:34:23.000Z</published>
    <updated>2020-08-10T01:48:34.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="敏捷宣言-价值观"><a href="#敏捷宣言-价值观" class="headerlink" title="敏捷宣言(价值观)"></a>敏捷宣言(价值观)</h1><p>个体与互动 高于 流程与工具<br>工作的软件 高于 详尽的文档<br>客户合作 高于 合同谈判<br>响应变化 高于 遵循计划<br>敏捷开发的核心思想是 以人为本 ，适应变化</p><p>敏捷是一种状态，心态及能力</p><h1 id="敏捷原则"><a href="#敏捷原则" class="headerlink" title="敏捷原则"></a>敏捷原则</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;敏捷宣言-价值观&quot;&gt;&lt;a href=&quot;#敏捷宣言-价值观&quot; class=&quot;headerlink&quot; title=&quot;敏捷宣言(价值观)&quot;&gt;&lt;/a&gt;敏捷宣言(价值观)&lt;/h1&gt;&lt;p&gt;个体与互动 高于 流程与工具&lt;br&gt;工作的软件 高于 详尽的文档&lt;br&gt;客户合作 高于 
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://peilei6026.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Web安全</title>
    <link href="https://peilei6026.github.io/2020/08/08/Web%E5%AE%89%E5%85%A8/"/>
    <id>https://peilei6026.github.io/2020/08/08/Web%E5%AE%89%E5%85%A8/</id>
    <published>2020-08-08T01:07:57.000Z</published>
    <updated>2020-08-20T08:14:18.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>域名(子域名)相同，端口相同，协议相同<br>公司的Nginx前端配置保证了其 web应用处于一个同源状态中<br>web应用中有请求数据的部分建议开启session验证或者自己携带token验证</p><h1 id="跨站脚本攻击-XSS"><a href="#跨站脚本攻击-XSS" class="headerlink" title="跨站脚本攻击(XSS)"></a>跨站脚本攻击(XSS)</h1><p>XSS通常值的时候，黑客通过HTML注入来篡改网页，主要分为</p><h2 id="反射性XSS"><a href="#反射性XSS" class="headerlink" title="反射性XSS"></a>反射性XSS</h2><h2 id="存储性XSS"><a href="#存储性XSS" class="headerlink" title="存储性XSS"></a>存储性XSS</h2><p>钓鱼网站等在浏览过程中执行恶意代码</p><h2 id="基于DOM的XSS"><a href="#基于DOM的XSS" class="headerlink" title="基于DOM的XSS"></a>基于DOM的XSS</h2><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>输入testurl后输入’onclick=alert(/xss/)//</p><h2 id="例用字符串编码"><a href="#例用字符串编码" class="headerlink" title="例用字符串编码"></a>例用字符串编码</h2><h2 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h2><h2 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用<base>标签</h2><h2 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h2><p>窃取管理员帐号或Cookie，冒充管理员操纵后台数据。  </p><p>窃取用户的个人信息或者登录帐号，对网站的用户安全产生巨大的威胁。 </p><p>网站挂马，利用嵌入到Web应用程序中的代码，在用户的计算机植入木马。 </p><p>发送广告或者垃圾信息，严重影响到用户的正常使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h1&gt;&lt;p&gt;域名(子域名)相同，端口相同，协议相同&lt;br&gt;公司的Nginx前端配置保证了其 web应用处于一个同源状态中&lt;br&gt;web应
      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Web" scheme="https://peilei6026.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JQ培训</title>
    <link href="https://peilei6026.github.io/2020/08/07/JQ%E5%9F%B9%E8%AE%AD/"/>
    <id>https://peilei6026.github.io/2020/08/07/JQ%E5%9F%B9%E8%AE%AD/</id>
    <published>2020-08-07T01:06:40.000Z</published>
    <updated>2020-08-07T02:14:27.147Z</updated>
    
    <content type="html"><![CDATA[<p>查看jq使用版本<br>在浏览器console窗口使用$.fn.jquery</p><p>jQuery核心思想，write less,do more!<br>jQ对象就是用jq的类库选择器获得的对象，即对DOM对象的封装</p><p>通过选取HTML，对选取的元素执行某些操作<br>技术语法 $(selector).action()<br>选择符(selector),查询和查找html元素<br>action()执行对元素的操作</p><h1 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h1><p>$(docunment).ready(function(){<br>    //开始写JQ代码<br>})<br>简介写法<br>$（function(){<br>    //开始写jq<br>}</p><h1 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h1><p>基于元素名<br>当用户点击按钮后，所有<p>元素都被隐藏；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">$(&quot;p&quot;).hide();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h1><p>通过HTML元素的id属性选取指定的元素。<br>当用户点击按钮后，所有id=”test“属性的元素都将被隐藏起来</p><p>$(document).ready(function(){<br>    $(“button”).clink(function(){<br>        $(“test”).hide();<br>    })<br>})</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看jq使用版本&lt;br&gt;在浏览器console窗口使用$.fn.jquery&lt;/p&gt;
&lt;p&gt;jQuery核心思想，write less,do more!&lt;br&gt;jQ对象就是用jq的类库选择器获得的对象，即对DOM对象的封装&lt;/p&gt;
&lt;p&gt;通过选取HTML，对选取的元素执行某
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://peilei6026.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS权威指南</title>
    <link href="https://peilei6026.github.io/2020/08/06/JS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <id>https://peilei6026.github.io/2020/08/06/JS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</id>
    <published>2020-08-06T00:59:17.000Z</published>
    <updated>2020-08-20T08:49:35.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>脚本语言，弱类型，轻量级，性能卓越。<br>轻量级：语言简练，实用性广</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;脚本语言，弱类型，轻量级，性能卓越。&lt;br&gt;轻量级：语言简练，实用性广&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HTML与CSS</title>
    <link href="https://peilei6026.github.io/2020/08/05/HTML%E4%B8%8ECSS/"/>
    <id>https://peilei6026.github.io/2020/08/05/HTML%E4%B8%8ECSS/</id>
    <published>2020-08-05T01:11:20.000Z</published>
    <updated>2020-08-05T01:29:05.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hyper-Text-Markup-Language"><a href="#Hyper-Text-Markup-Language" class="headerlink" title="Hyper Text Markup Language"></a>Hyper Text Markup Language</h1><p>Hyper Text Markup Language<br>Hyper Text;超链接，在多个文档之间简历关联性，形成逻辑上的网状结构<br>Markup Language:语言标签，语言由标签构成。</p><h1 id="什么式-HTML"><a href="#什么式-HTML" class="headerlink" title="什么式 HTML"></a>什么式 HTML</h1><p>结构简单，固定标签和使用规则，支持各种信息(文本，图像，音视频)<br>应用广泛<br>各种类型的网站<br>各种办公应用软件<br>应用嵌套/APP 嵌套<br>跨平台 在浏览器支持下显示效果一样</p><p>易维护 开发快速，升级简单</p><h1 id="SGML-DTD"><a href="#SGML-DTD" class="headerlink" title="SGML+DTD"></a>SGML+DTD</h1><p>Standard Generalized Markup Language</p><p>Document Type Definition</p><h1 id="HTML-特点"><a href="#HTML-特点" class="headerlink" title="HTML 特点"></a>HTML 特点</h1><p>本地存储,语义性，网页多媒体，连接，设备兼容性，三维，图形以及特效，性能与集成特性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hyper-Text-Markup-Language&quot;&gt;&lt;a href=&quot;#Hyper-Text-Markup-Language&quot; class=&quot;headerlink&quot; title=&quot;Hyper Text Markup Language&quot;&gt;&lt;/a&gt;Hyper Te
      
    
    </summary>
    
    
    
      <category term="HTML" scheme="https://peilei6026.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>WEB编码规范</title>
    <link href="https://peilei6026.github.io/2020/08/04/WEB%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://peilei6026.github.io/2020/08/04/WEB%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2020-08-04T01:04:54.000Z</published>
    <updated>2020-08-20T08:14:16.611Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要遵循编码规范<br>可读性好，易于维护，不易出错，最佳实践<br>web编码规范</p><p>命名的重要性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么要遵循编码规范&lt;br&gt;可读性好，易于维护，不易出错，最佳实践&lt;br&gt;web编码规范&lt;/p&gt;
&lt;p&gt;命名的重要性&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="培训" scheme="https://peilei6026.github.io/tags/%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>js实现五子棋</title>
    <link href="https://peilei6026.github.io/2020/08/03/js%E5%AE%9E%E7%8E%B0%E4%BA%94%E5%AD%90%E6%A3%8B/"/>
    <id>https://peilei6026.github.io/2020/08/03/js%E5%AE%9E%E7%8E%B0%E4%BA%94%E5%AD%90%E6%A3%8B/</id>
    <published>2020-08-03T07:22:17.000Z</published>
    <updated>2020-08-20T08:39:52.805Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>五子棋</title><style>canvas {display: block;margin: 50px auto;box-shadow: -2px -2px 2px #efefef, 5px 5px 5px #b9b9b9;}</style><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="裴雷de博客" type="application/atom+xml"></head><body><canvas id="chess" width="450px" height="450px"></canvas><script>var chessBoard = []var over = false// 赢法数组var wins = []// 赢法的统计数组var myWin = []var computerWin = []for (var i = 0; i < 15; i++) {chessBoard[i] = []for(var j = 0; j < 15; j++) {chessBoard[i][j] = 0}}for (var i = 0; i < 15; i++) {wins[i] = []for(var j = 0; j < 15; j++) {wins[i][j] = []}}var count = 0for(var i = 0; i < 15; i++) {for(var j = 0; j<11; j++) {for(var k = 0; k < 5; k++) {wins[i][j+k][count] = true}count++}}for(var i = 0; i < 15; i++) {for(var j = 0; j<11; j++) {for(var k = 0; k < 5; k++) {wins[j+k][i][count] = true}count++}}for(var i = 0; i < 11; i++) {for(var j = 0; j<11; j++) {for(var k = 0; k < 5; k++) {wins[i+k][j+k][count] = true}count++}}for(var i = 0; i < 11; i++) {for(var j = 14; j>3; j--) {for(var k = 0; k < 5; k++) {wins[i+k][j-k][count] = true}count++}}for(var i = 0; i < count; i++) {myWin[i] = 0computerWin[i] = 0}var me = truevar chess = document.getElementById('chess')var context = chess.getContext('2d')context.strokeStyle = '#bfbfbf'// var logo = new Image()// logo.src = 'images/logo.png'// logo.onload = function () {// context.drawImage(logo, 0, 0, 450, 450)// }for(var i = 0; i < 15; i++) {context.moveTo(15 + i * 30, 15)context.lineTo(15 + i * 30, 435)context.stroke()context.moveTo(15, 15 + i * 30)context.lineTo(435, 15 + i * 30)context.stroke()}var oneStep = function (i, j, me) {context.beginPath()context.arc(15 + i * 30, 15 + j * 30, 13, 0, 2 * Math.PI)context.closePath()var gradient = context.createRadialGradient(15 + i * 30 + 2, 15 + j * 30 - 2, 15, 15 + i * 30 + 2, 15 + j * 30 - 2, 0)if (me) {gradient.addColorStop(0, '#0a0a0a')gradient.addColorStop(1, '#636766')} else {gradient.addColorStop(0, '#d1d1d1')gradient.addColorStop(1, '#f9f9f9')}context.fillStyle = gradientcontext.fill()}chess.onclick = function (e) {if (over || !me) {return}var x = e.offsetXvar y = e.offsetYvar i = Math.floor(x / 30)var j = Math.floor(y / 30)if (chessBoard[i][j] === 0) {oneStep(i, j, me)chessBoard[i][j] = 1for(var k = 0; k < count; k++) {if (wins[i][j][k]) {myWin[k]++computerWin[k] = 6if (myWin[k] == 5) {window.alert('你赢了')over = true}}}if (!over) {me = !mecomputerAI()}}}var computerAI = function () {var myScore = []var computerScore = []var max = 0var u = 0, v = 0for(var i = 0; i < 15; i++) {myScore[i] = []computerScore[i] = []for(var j = 0; j< 15; j++) {myScore[i][j] = 0computerScore[i][j] = 0}}for(var i = 0; i < 15; i++) {for(var j = 0; j< 15;j++) {if (chessBoard[i][j] == 0) {for (var k = 0; k < count; k++) {if (wins[i][j][k]) {if (myWin[k] == 1) {myScore[i][j] += 200} else if(myWin[k] == 2) {myScore[i][j] += 400} else if(myWin[k] == 3) {myScore[i][j] += 2000} else if(myWin[k] == 4) {myScore[i][j] += 10000}if (computerWin[k] == 1) {computerScore[i][j] += 220} else if(computerWin[k] == 2) {computerScore[i][j] += 420} else if(computerWin[k] == 3) {computerScore[i][j] += 2100} else if(computerWin[k] == 4) {computerScore[i][j] += 20000}}}if (myScore[i][j] > max) {max = myScore[i][j]u = iv = j} else if(myScore[i][j] == max) {if (computerScore[i][j] > computerScore[u][v]) {u = iv = j}}if (computerScore[i][j] > max) {max = computerScore[i][j]u = iv = j} else if(computerScore[i][j] == max) {if (myScore[i][j] > myScore[u][v]) {u = iv = j}}}}}oneStep(u, v, false)chessBoard[u][v] = 2for(var k = 0; k < count; k++) {if (wins[u][v][k]) {computerWin[k]++myWin[k] = 6if (computerWin[k] == 5) {window.alert('你输了')over = true}}}if (!over) {me = !me}}</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;UTF-8&quot;&gt;
	&lt;title&gt;五子棋&lt;/title&gt;
	&lt;style&gt;
		canvas {
			display: block;
			margin: 50px 
      
    
    </summary>
    
    
    
      <category term="学习" scheme="https://peilei6026.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://peilei6026.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title> JavaScript简介</title>
    <link href="https://peilei6026.github.io/2020/08/03/JavaScript%E7%AE%80%E4%BB%8B/"/>
    <id>https://peilei6026.github.io/2020/08/03/JavaScript%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-03T05:27:54.000Z</published>
    <updated>2020-08-03T05:48:02.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><p>JS是互联网上最流行的脚本语言，这门语言可以用于HTML和web，更可广泛用于服务器，PC笔记本电脑，平板电脑，和智能手机等设备。</p><h1 id="JS是脚本语言"><a href="#JS是脚本语言" class="headerlink" title="JS是脚本语言"></a>JS是脚本语言</h1><p>JS是一种轻量级的编程语言<br>JS是可插入的HTML页面的编程代码<br>JS插入HTML页面后，可由所有的现代浏览器执行<br>JS很容易学习</p><h1 id="JS直接写入HTML输出流"><a href="#JS直接写入HTML输出流" class="headerlink" title="JS直接写入HTML输出流"></a>JS直接写入HTML输出流</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.write(&quot;&lt;h1&gt;这是一个段落&lt;&#x2F;h1&gt;&quot;)；</span><br><span class="line">document.write(&quot;&lt;p&gt;这是一个段落&lt;&#x2F;&gt;);</span><br></pre></td></tr></table></figure><ul><li>您只能在HTML输出中使用document.write，如果您在文档加载后使用该方法，会覆盖整个文档<h1 id="JS对事件的反应"><a href="#JS对事件的反应" class="headerlink" title="JS对事件的反应"></a>JS对事件的反应</h1></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type &#x3D;&quot;button&quot; onclick&#x3D;&quot;alert(&#39;欢迎!&#39;)&quot;&gt;点我！&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>alert()函数在JS中并不常见，但是他对代码测试非常方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript简介&quot;&gt;&lt;a href=&quot;#JavaScript简介&quot; class=&quot;headerlink&quot; title=&quot;JavaScript简介&quot;&gt;&lt;/a&gt;JavaScript简介&lt;/h1&gt;&lt;p&gt;JS是互联网上最流行的脚本语言，这门语言可以用于HTML和w
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://peilei6026.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的新特性</title>
    <link href="https://peilei6026.github.io/2020/07/30/JavaScript%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://peilei6026.github.io/2020/07/30/JavaScript%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2020-07-30T13:45:22.000Z</published>
    <updated>2020-07-30T13:46:35.489Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="React" scheme="https://peilei6026.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>前端架构的认知</title>
    <link href="https://peilei6026.github.io/2020/07/29/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%A4%E7%9F%A5/"/>
    <id>https://peilei6026.github.io/2020/07/29/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%A4%E7%9F%A5/</id>
    <published>2020-07-29T14:39:23.000Z</published>
    <updated>2020-07-31T14:32:42.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>架构并不是只限于技术选型<br>是架构设计作为软件生命周期的一部分，并不是说开始的时候，设计完成后就会一成不变，软件的生命周期包含了迭代，维护，重构等过程，架构设计亦是如此，所以说架构是需要变化的，目的就是适应当前的情况的开发场景。<br>而架构产生的时间，必定是收到当前的约束条件，如人力，团对技术积累，时间，业务定位等需求。所以，当前架构可能并不能满足未来的需求，我们要开放对待这个问题，只要当前的架构符合一定的设计原则，未来进行架构的演进就不是问题。<br>架构这个词的解释也没有一个明确的定义，每个层级，每个场景都有自己的解释</p><p>软件架构(software architecture)，是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计。<br>其实软件开发和盖一栋大楼一样，都需要规划，设计，实施等一系列的阶段，最开始设计建筑图纸，主题架构，还要考虑绿化，材料，安全等因素，经过一系列的决策，才有了一套成熟的建筑施工方案，按照规范建造，才能保证质量和速度。<br>而开发一个软件或者前端工程也是一个建筑的过程，我们要通过业务来定位系统间的关系，讨论技术栈和框架的徐娜用，根据当前团对的技术水平进行技术的选型，考虑各个模块之间的界限和交互，上线部署策略，问题回滚策略等一系列的决策才能设计符合当前情况的技术框架。</p><h1 id="前端开发过程中需要怎样的架构"><a href="#前端开发过程中需要怎样的架构" class="headerlink" title="前端开发过程中需要怎样的架构"></a>前端开发过程中需要怎样的架构</h1><p>基本要求如下:</p><ul><li>符合当前的业务定位</li><li>前端架构必须具有可实施性</li><li>必须匹配当前的技术储备</li><li>有足够的人力资源去完成</li><li>具有可伸缩，可扩展性<br>[因地制宜]应该是开始设计架构的基本准则，每套架构的产生都有其他的外界因素影响，所以，各个公司，各个团对之间的架构不能照搬，如果强制搬过来，可能会适得其反，就像你那alibaba的技术架构去搬到初创公司，那是根本行不通的，人员，资源不匹配，是没办法去实施架构的。</li><li>准确的业务定位，业务可能是影响架构的主要因素之一，所以我们要找准业务上的定位</li><li>明确与其他业务之间的联系，确定与其他系统的层次关系，相互间的通讯依赖等</li><li>设计好系统内子模块之间的关系，如A业务模块需要与B模块交互，该采取怎样的方式</li><li>基础模块明确，项目中，必定含有基础模块取提供一些公用的方法，数据去提供给各个子模块。</li><li>组件规划，这就是在细一层的规划了，制定组件的交互方式，开发范式</li><li>开发规范和上线流程，用于指导开发中的过程<h1 id="架构设计setp"><a href="#架构设计setp" class="headerlink" title="架构设计setp"></a>架构设计setp</h1>设计需要进行一系列的技术及非技术的相关工作。</li><li>收集利益相关者的需求，产品经理，业务人员，项目负责人等</li><li>与相应的技术人员进行讨论，确定架构上的潜在限制和要求</li><li>寻找可行性的技术方案</li><li>细化技术方案细节，确定一些功能列表中的技术可行性</li><li>确定风险点</li><li>与技术人员反复讨论，集合大家意见</li><li>对技术方案进行demo的概念化验证</li><li>结合当前业务，细化架构的部分实施细节</li><li>进行排期</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;架构并不是只限于技术选型&lt;br&gt;是架构设计作为软件生命周期的一部分，并不是说开始的时候，设计完成后就会一成不变，软件的生命周期包含了迭代，维
      
    
    </summary>
    
    
    
      <category term="架构" scheme="https://peilei6026.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="前端" scheme="https://peilei6026.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>输入n个数，找出其中最小的K个数</title>
    <link href="https://peilei6026.github.io/2020/07/18/%E8%BE%93%E5%85%A5n%E4%B8%AA%E6%95%B0%EF%BC%8C%E6%89%BE%E5%87%BA%E5%85%B6%E4%B8%AD%E6%9C%80%E5%B0%8F%E7%9A%84K%E4%B8%AA%E6%95%B0/"/>
    <id>https://peilei6026.github.io/2020/07/18/%E8%BE%93%E5%85%A5n%E4%B8%AA%E6%95%B0%EF%BC%8C%E6%89%BE%E5%87%BA%E5%85%B6%E4%B8%AD%E6%9C%80%E5%B0%8F%E7%9A%84K%E4%B8%AA%E6%95%B0/</id>
    <published>2020-07-18T14:45:51.000Z</published>
    <updated>2020-07-18T14:51:53.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题：输入4，5，1，6，2，7，3，8这8个数，则最小的4个数是1，2，3，4"><a href="#问题：输入4，5，1，6，2，7，3，8这8个数，则最小的4个数是1，2，3，4" class="headerlink" title="问题：输入4，5，1，6，2，7，3，8这8个数，则最小的4个数是1，2，3，4"></a>问题：输入4，5，1，6，2，7，3，8这8个数，则最小的4个数是1，2，3，4</h1><h1 id="解题思路：这道题我们仍然可以用快速排序的思路来解决，基于数组的第k个数来调整，比第k个数小的数字都移到数组左边，比第k个数大的数字都移到数组的右边，这样一来，位于数组左边的k个数就是最小的k个数字（不一定需要全部排序）。在-PHP-中，只需要调用-sort-函数，取前k个数字就可以得到结果了，并且其时间复杂度是O-nlogn-，符合我们的预期。当然，快排也好，归并也好，都只适合小规模的数据，并不适用于海量数据的处理，比如上百万、上千万的数据集，使用数组函数-sort-显然不合适了，使用自行实现的快排也不合适，这个时候，我们可以考虑使用前面算法和数据结构中介绍的堆排序。堆排序的时间复杂度也是-O-nlogn-，这里我们需要通过大顶堆来实现，即维护一个大小为k的大顶堆，如果待处理数据集的长度大于k，则当数字容量超过k时，比较后续数字与堆顶数字值（堆中最大），大于则跳过，小于则重新堆化大顶堆，依次类推，直到整个数据集遍历一遍，最后保留下来的大顶堆就是最小的k个数。"><a href="#解题思路：这道题我们仍然可以用快速排序的思路来解决，基于数组的第k个数来调整，比第k个数小的数字都移到数组左边，比第k个数大的数字都移到数组的右边，这样一来，位于数组左边的k个数就是最小的k个数字（不一定需要全部排序）。在-PHP-中，只需要调用-sort-函数，取前k个数字就可以得到结果了，并且其时间复杂度是O-nlogn-，符合我们的预期。当然，快排也好，归并也好，都只适合小规模的数据，并不适用于海量数据的处理，比如上百万、上千万的数据集，使用数组函数-sort-显然不合适了，使用自行实现的快排也不合适，这个时候，我们可以考虑使用前面算法和数据结构中介绍的堆排序。堆排序的时间复杂度也是-O-nlogn-，这里我们需要通过大顶堆来实现，即维护一个大小为k的大顶堆，如果待处理数据集的长度大于k，则当数字容量超过k时，比较后续数字与堆顶数字值（堆中最大），大于则跳过，小于则重新堆化大顶堆，依次类推，直到整个数据集遍历一遍，最后保留下来的大顶堆就是最小的k个数。" class="headerlink" title="解题思路：这道题我们仍然可以用快速排序的思路来解决，基于数组的第k个数来调整，比第k个数小的数字都移到数组左边，比第k个数大的数字都移到数组的右边，这样一来，位于数组左边的k个数就是最小的k个数字（不一定需要全部排序）。在 PHP 中，只需要调用 sort 函数，取前k个数字就可以得到结果了，并且其时间复杂度是O(nlogn)，符合我们的预期。当然，快排也好，归并也好，都只适合小规模的数据，并不适用于海量数据的处理，比如上百万、上千万的数据集，使用数组函数 sort 显然不合适了，使用自行实现的快排也不合适，这个时候，我们可以考虑使用前面算法和数据结构中介绍的堆排序。堆排序的时间复杂度也是 O(nlogn)，这里我们需要通过大顶堆来实现，即维护一个大小为k的大顶堆，如果待处理数据集的长度大于k，则当数字容量超过k时，比较后续数字与堆顶数字值（堆中最大），大于则跳过，小于则重新堆化大顶堆，依次类推，直到整个数据集遍历一遍，最后保留下来的大顶堆就是最小的k个数。"></a>解题思路：这道题我们仍然可以用快速排序的思路来解决，基于数组的第k个数来调整，比第k个数小的数字都移到数组左边，比第k个数大的数字都移到数组的右边，这样一来，位于数组左边的k个数就是最小的k个数字（不一定需要全部排序）。在 PHP 中，只需要调用 sort 函数，取前k个数字就可以得到结果了，并且其时间复杂度是O(nlogn)，符合我们的预期。当然，快排也好，归并也好，都只适合小规模的数据，并不适用于海量数据的处理，比如上百万、上千万的数据集，使用数组函数 sort 显然不合适了，使用自行实现的快排也不合适，这个时候，我们可以考虑使用前面算法和数据结构中介绍的堆排序。堆排序的时间复杂度也是 O(nlogn)，这里我们需要通过大顶堆来实现，即维护一个大小为k的大顶堆，如果待处理数据集的长度大于k，则当数字容量超过k时，比较后续数字与堆顶数字值（堆中最大），大于则跳过，小于则重新堆化大顶堆，依次类推，直到整个数据集遍历一遍，最后保留下来的大顶堆就是最小的k个数。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题：输入4，5，1，6，2，7，3，8这8个数，则最小的4个数是1，2，3，4&quot;&gt;&lt;a href=&quot;#问题：输入4，5，1，6，2，7，3，8这8个数，则最小的4个数是1，2，3，4&quot; class=&quot;headerlink&quot; title=&quot;问题：输入4，5，1，6
      
    
    </summary>
    
    
    
      <category term="笔试题" scheme="https://peilei6026.github.io/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
